(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{155:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"自适应布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自适应布局"}},[t._v("#")]),t._v(" 自适应布局")]),t._v(" "),s("h2",{attrs:{id:"基础知识："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识："}},[t._v("#")]),t._v(" 基础知识：")]),t._v(" "),s("p",[s("strong",[t._v("物理像素")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("dp iphone6(375*667)\n设备独立像素(Device Independent Pixels)简称DIP或DP\n在iOS、Android和React Native开发中样式单位其实都使用的是设备独立像素。\niOS的尺寸单位为pt，Android的尺寸单位为dp，React Native中没有指定明确的单位，它们其实都是设备独立像素dp。")])]),t._v(" "),s("li",[s("p",[t._v("dpr\n物理像素和设备独立像素的比值 iphone6的比例为2")])]),t._v(" "),s("li",[s("p",[t._v("px CSS像素\nrem 是相对于html节点的font-size来做计算的。")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("页面的缩放系数 = CSS像素 / 设备独立像素。")])]),t._v(" "),s("ul",[s("li",[t._v("viewport\n视口(viewport)代表当前可见的计算机图形区域。\n布局视口、视觉视口、理想视口\n上面在介绍CSS像素时曾经提到页面的缩放系数 = CSS像素 / 设备独立像素，实际上说页面的缩放系数 = 理想视口宽度 / 视觉视口宽度更为准确。\n所以，当页面缩放比例为100%时，CSS像素 = 设备独立像素，理想视口 = 视觉视口。")]),t._v(" "),s("li",[t._v("em")]),t._v(" "),s("li",[t._v("rem")]),t._v(" "),s("li",[t._v("vw")])]),t._v(" "),s("h2",{attrs:{id:"flexible-px2rem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flexible-px2rem"}},[t._v("#")]),t._v(" flexible&px2rem")]),t._v(" "),s("p",[t._v("根据dpr改变设置根节点的font-size值")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--我们可以借助<meta>元素的viewport来帮助我们设置视口、缩放等，从而让移动端得到更好的展示效果。--\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("device-width就等于理想视口的宽度，所以设置width=device-width就相当于让布局视口等于理想视口。\n由于initial-scale = 理想视口宽度 / 视觉视口宽度，所以我们设置initial-scale=1;就相当于让视觉视口等于理想视口。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("lib-flexible这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用viewport来替代此方案。")])]),t._v(" "),s("h2",{attrs:{id:"vh、vw方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vh、vw方案"}},[t._v("#")]),t._v(" vh、vw方案")]),t._v(" "),s("p",[t._v("1%视觉视口\n使用PostCss的px-to-vw来修改")])])}),[],!1,null,null,null);a.default=n.exports}}]);